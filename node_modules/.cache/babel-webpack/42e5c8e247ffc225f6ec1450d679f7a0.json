{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { User } from './user';\nimport { Repo } from './repo';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SearchService = /*#__PURE__*/(() => {\n  class SearchService {\n    constructor(http) {\n      this.http = http;\n      this.user = new User(\"\", 0, 0, 0, \"\", \"\", \"\");\n      this.repos = new Repo(\"\", \"\", \"\", \"\", new Date());\n    }\n\n    getProfile(username) {\n      let userUrl = 'https://api.github.com/users/' + username + '?client_id=' + environment.clientId + \"&client_secret=\" + environment.clientSecret;\n      let promise = new Promise((resolve, reject) => {\n        this.http.get(userUrl).toPromise().then(response => {\n          this.user = response;\n          resolve();\n        }, error => {\n          this.user.name = \"We couldn’t find any users matching the name given\";\n          reject(error);\n        });\n      });\n      return promise;\n    }\n\n    getRepo(username) {\n      let repoUrl = 'https://api.github.com/users/' + username + '/repos?order=created&sort=asc?client_id=' + environment.clientId + '&client_secret=' + environment.clientSecret;\n      let promise = new Promise((resolve, reject) => {\n        this.http.get(repoUrl).toPromise().then(response => {\n          this.repos = response;\n          console.log(this.repos);\n          resolve();\n        }, error => {\n          this.repos.name = \"We couldn’t find any repositories matching the name given\";\n          reject(error);\n        });\n      });\n      return promise;\n    }\n\n  }\n\n  SearchService.ɵfac = function SearchService_Factory(t) {\n    return new (t || SearchService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SearchService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchService,\n    factory: SearchService.ɵfac,\n    providedIn: 'root'\n  });\n  return SearchService;\n})();","map":null,"metadata":{},"sourceType":"module"}